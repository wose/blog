#+TITLE: zuendmasse.de

* Let's write an embedded-hal-driver
:PROPERTIES:
:RSS_PERMALINK: lets-write-an-embedded-hal-driver.html
:PUBDATE:  2018-02-23
:ID:       e7b79420-cdf0-4493-8cfd-9b971cbd5f90
:END:
#+tags: rust, embedded, embedded-hal-driver
Mid January japaric started [[https://github.com/rust-lang-nursery/embedded-wg/issues/39]["The weekly driver initiative"]] with the goal to
kick-start releases of platform agnostic [[https://docs.rs/embedded-hal/0.1.0/embedded_hal/][embedded-hal]] based driver crates. In
this post we'll build an =embedded-hal-driver= for the *AT24C32*-EEPROM chip.

** What's an EEPROM?
:PROPERTIES:
:ID:       0b48671a-3cad-4866-9a54-185f55df9ffe
:END:

EEPROM stands for electrically erasable read only memory. It is quite
slow and has a low memory density compared to flash memory, but allows single
byte operations (read/write). Modern EEPROMs also offer multi byte page reads
and writes.

** What is it good for?
:PROPERTIES:
:ID:       a401dbf5-72ab-4245-bb74-051767601282
:END:

While you shouldn't use EEPROMs to store huge or often changing data, they are
useful to hold serial numbers, telephone numbers, configuration data,
calibration data... basically everything which is seldom changed. EEPROM cells
can typically be rewritten about a million times, so think about it before you
dump your logs or sensor data into it.

** AT24C32
:PROPERTIES:
:ID:       e0217d90-00e4-43ac-8f8c-dee44eded6f0
:END:

I happen to own an DS3231 real time clock (RTC) breakout board which also
contains an Atmel AT24C32 EEPROM and is accessible through /i2c/-bus. We ignore
the RTC for now and focus on the EEPROM.

A good start is to take a look in the [[https://www.elecrow.com/download/24C32.pdf][AT24C32 datasheet]] to get an overview of
the chips opcodes and features. The device supports up to eight different /i2c/
addresses depending on the state of the =A0=, =A1= and =A2= pin. This means we
can connect up to eight of these EEPROMs to a single /i2c/-bus (without address
modifications at runtime). And there are some /commands/ we'll have to implement
to actually write or read bytes:

single byte write
page write
current address read
random read
sequential read

** Electrical connection
:PROPERTIES:
:ID:       da665945-cdbf-4bc2-b7a3-2fe450e48af0
:END:

The device communicates over the /i2c/-bus to the outside world. Mine is part of
a RTC breakout board which looks like this:

[[file:../images/ds3231_at24c32.png]]

The orange rectangle marks the AT24C32 chip. The green one shows 3 solder
bridges you can short to change the /i2c/ address. The red rectangle marks the 4
pins we need to connect to our test machine. I'm using a raspberry pi 2 and the
following connection:

| RPi pin    | AT24C32 pin | J1 pin |
|------------+-------------+--------|
| 1 3.3V     | 8 VCC       | 5 VCC  |
| 9 GND      | 4 GND       | 6 GND  |
| 3 I2C1_SDA | 5 SDA       | 4 SDA  |
| 5 I2C1_SCL | 6 SCL       | 3 SCL  |

** Testing the setup
:PROPERTIES:
:ID:       3a3ae7dc-d579-4321-b3f3-7d0150458ca6
:END:

We can now test the connection by scanning the bus for devices. To do this we'll
first need to enable /i2c/ on the RPi:

=sudo raspi-config=
=5 Interfacing Options=
=P5 I2C=
=<Yes>=

#+begin_example
  $ ls /dev/i2c*
  /dev/i2c-1
#+end_example

Let's install some helpers:

#+begin_example
  $ sudo apt-get install -y i2c-tools
#+end_example

And finally check if our device is sitting in the /i2c/-bus.

#+begin_example
  $ i2cdetect -y 1
       0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
  00:          -- -- -- -- -- -- -- -- -- -- -- -- --
  10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
  20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
  30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
  40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
  50: -- -- -- -- -- -- -- 57 -- -- -- -- -- -- -- --
  60: -- -- -- -- -- -- -- -- 68 -- -- -- -- -- -- --
  70: -- -- -- -- -- -- -- --
#+end_example

There they are. Address =0x68= is the RTC and =0x57= is our AT24C32 because all
solder bridges are open and the =A*= pins are pulled up. The /base address/ of
the device is =0b1010000= (=0x50=) and the last 3 LSB are determined by the =A*=
pins.

** The driver crate
:PROPERTIES:
:ID:       d510c299-496c-45ce-a287-76dba5bcbfb4
:END:

The hardware works, now let's talk to it. We let cargo create a new crate and
setup a new target to cross compile to the raspberry pi, so we can quickly build
an example and test it on our target.

#+begin_example
  $ cargo new at24cx
      Created library `at24cx` project
  $ cd at24cx
  $ mkdir .cargo
  $ editor .cargo/config && cat $_
  [target.armv7-unknown-linux-gnueabihf]
  linker = "arm-linux-gnueabihf-gcc-6"
  $ cargo build --target=armv7-unknown-linux-gnueabihf
     Compiling at24cx v0.1.0 (file:///home/wose/projects/rust-embedded/at24cx)
      Finished dev [unoptimized + debuginfo] target(s) in 0.34 secs
#+end_example

** Dependencies
:PROPERTIES:
:ID:       948189f9-fd77-41db-91c2-0396185995fd
:END:

=embedded-hal= provides /i2c/ traits we'll use to talk to the /i2c/-bus in a
platform agnostic way. To test it we'll need an implementation of the
=embedded-hal= traits. [[https://github.com/japaric/linux-embedded-hal][linux-embedded-hal]] provides this implementation for linux
and thus for the raspberry pi.

#+begin_example
  $ cargo add embedded-hal
  $ cargo add --dev linux-embedded-hal
#+end_example

** Write/Read a single byte
:PROPERTIES:
:ID:       546bfcae-a2c8-46ce-ac1e-53cde5c48aac
:END:

Let's try to create a minimal driver to write a single byte to the EEPROM and
read it back. Another look in the datasheet reveals what we need to send to
write a single byte:

[[file:../images/byte-write.png]]

the device address (=0x57=) with the =R/W= bit =0= (write to the slave)
MSBs of the 16 bit address (the memory address is actually just 12 bit for the
AT24C32)
LSBs of the 16 bit address
the data byte

What about reading a random memory address?

[[file:../images/random-read.png]]

Similar to writing a single byte, we first need to /write/ the device and memory
address to the /i2c/-bus and then start a read by sending the device address
with the =R/W= bit =1= (read from the slave). The EEPROM will then send the data
at that memory address.

#+name: lib.rs
#+begin_src rust
  #![no_std]

  extern crate embedded_hal as hal;

  use hal::blocking::i2c::{Write, WriteRead};

  // we'll add support for the other 7 addresses later
  pub const ADDRESS: u8 = 0x57;

  /// AT24Cx Driver
  pub struct AT24Cx;

  impl AT24Cx
  {
      pub fn new() -> Self {
          AT24Cx {}
      }

      pub fn write<I2C, E>(&self, i2c: &mut I2C, address: u16, byte: u8) -> Result<(), E>
      where
          I2C: Write<Error = E> + WriteRead<Error = E>,
      {
          let msb = (address >> 8) as u8;
          let lsb = (address & 0xFF) as u8;
          i2c.write(ADDRESS, &[msb, lsb, byte])
      }

      pub fn read<I2C, E>(&self, i2c: &mut I2C, address: u16) -> Result<u8, E>
      where
          I2C: Write<Error = E> + WriteRead<Error = E>,
      {
          let msb = (address >> 8) as u8;
          let lsb = (address & 0xFF) as u8;
          let mut buffer = [0];
          i2c.write_read(ADDRESS, &[msb, lsb], &mut buffer)?;
          Ok(buffer[0])
      }
  }
#+end_src

Now we add an example to actually test our driver.
#+name: examples/rpi.rs
#+begin_src rust
  extern crate at24cx;
  extern crate linux_embedded_hal as hal;

  use at24cx::AT24Cx;
  use hal::I2cdev;
  use std::thread;
  use std::time::Duration;

  fn main() {
      let mut dev = I2cdev::new("/dev/i2c-1").unwrap();
      let eeprom = AT24Cx::new();

      eeprom.write(&mut dev, 0x0042, 42).unwrap();

      // wait 10ms for the write to finish or the eeprom will NAK the next write or read request
      thread::sleep(Duration::from_millis(10));

      println!(
          "The answer to the ultimate question of life, the universe and everything is {}.",
          eeprom.read(&mut dev, 0x0042).unwrap()
      );
  }
#+end_src

Build and run it on the RPi:
#+begin_example
  $ cargo build --target=armv7-unknown-linux-gnueabihf --example rpi
  $ # copy the example to your RPi
  $ ssh pi@pi
  $ ./rpi
  The answer to the ultimate question of life, the universe and everything is 42.
#+end_example

/Yay!/ This driver will now work on any platform which has an =embedded-hal=
/i2c/ trait implementation. But there is more. We can get rid of the delay in
our example by polling the EEPROM for the finished write operation and also
write and read multiple bytes in one go.

** Memory pages
:PROPERTIES:
:ID:       6b86d775-f887-4e31-8249-8d290c62c22f
:END:

The memory inside the EEPROM can be visualized as a table. The rows represent
/pages/ and the columns the data words inside a page. The size of a page and
data word is device specific. The AT24C32 has a word size of 8 bit (or 1 byte)
,a page size of 32 words and has 128 pages (128 * 32 * 8 = 32768 bits).

Why is this important? Every time we write or read a word the internal address
pointer of the EEPROM is incremented, so the next read or write operation will
use the next byte. But if we hit a page boundary we won't move to the next page
but instead start at the beginning of the current page (only the lower 5 bits of
the memory address are incremented). Sending more bytes than the page size (32)
will overwrite data we already sent.

[[file:../images/page-write.png]]

A page write is very similar to single byte write, just send more data bytes
instead of the =STOP=.

#+begin_src rust
  ...
      pub fn write_page<I2C, E>(&self, i2c: &mut I2C, address: u16, data: &[u8]) -> Result<(), E>
      where
          I2C: Write<Error = E> + WriteRead<Error = E>,
      {
          // limit is the page size or we would overwrite data we jyst sent
          let len = min(data.len(), 32);

          // 2 address bytes + page size
          let mut  buffer = [0; 34];
          {
              let (addr, dst) = buffer.split_at_mut(2);
              BE::write_u16(addr, address);
              dst[..len].clone_from_slice(&data[..len]);
          }

          i2c.write(ADDRESS, &buffer[..data.len()+2])
      }
  ...
#+end_src

Note that we now use the [[https://docs.rs/byteorder/1.2.1/byteorder/][byteorder]] crate to /format/ the address instead of
doing so by hand. The following example will test this by filling page 1 with
=0xEE=.

#+begin_src rust
  extern crate at24cx;
  extern crate linux_embedded_hal as hal;

  use at24cx::AT24Cx;
  use hal::I2cdev;

  fn main() {
      let mut dev = I2cdev::new("/dev/i2c-1").unwrap();
      let eeprom = AT24Cx::new();
      eeprom.write_page(&mut dev, 32, &[0xEE; 32]).unwrap();
  }
#+end_src

To read more than one byte in one go we'll modify the current =read= method to
read an arbitrary amount of bytes. Sequential read operations are not limited to
a single page. If the end of the memory is reached the internal address pointer
will roll over and continue at the beginning of the memory. So in theory we
should be able to read the entire EEPROM with one transaction.

[[file:../images/sequential-read.png]]

#+begin_src rust
  ...
      pub fn read<B, I2C, E>(&self, i2c: &mut I2C, address: u16) -> Result<B, E>
      where
          B: Unsize<[u8]>,
          I2C: Write<Error = E> + WriteRead<Error = E>,
      {
          let mut addr = [0; 2];
          BE::write_u16(&mut addr, address);

          let mut buffer: B = unsafe { mem::uninitialized() };
          {
              let slice: &mut [u8] = &mut buffer;
              i2c.write_read(ADDRESS, &addr, slice)?;
          }

          Ok(buffer)
      }
  ...
#+end_src

The following example will dump the complete EEPROM memory and we should see our
/answer/ from the first example somewhere near the beginning of the memory and
page 1 should contain =0xEE= for every byte.

#+begin_src rust
  extern crate at24cx;
  extern crate linux_embedded_hal as hal;

  use at24cx::AT24Cx;
  use hal::I2cdev;

  fn main() {
      let mut dev = I2cdev::new("/dev/i2c-1").unwrap();
      let eeprom = AT24Cx::new();

      let mem: [u8;4096] = eeprom.read(&mut dev, 0x0000).unwrap();
      for page in mem.chunks(32) {
          for byte in page {
              print!("{:X} ", byte);
          }
          println!();
      }
  }
#+end_src

And run it:

#+begin_example
  $ ./rpi
  41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F 50 51 52 53 54 55 56 57 58 59 5A FF FF FF FF FF FF
  EE EE EE EE EE EE EE EE EE EE EE EE EE EE EE EE EE EE EE EE EE EE EE EE EE EE EE EE EE EE EE EE
  FF FF 2A FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF
  FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF
  FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF
  ...
#+end_example

We can spot the previously set value =42= (=0x2A=) at row 3 column 3 with the
memory address =2 * 32 + 2 = 66 (0x0042)=, which was the address we used for the
write. /Yay!/

We can also notice that the start of page 0 is filled with the letters A-Z. This
may be some remains from factory tests, they weren't written by me.

** Conclusion and TODOs
:PROPERTIES:
:ID:       ff25f060-d507-441d-8309-bf9edf593d49
:END:

We now have a platform agnostic driver for the AT24C32 EEPROM. Actually, we can
also use it with the AT24C64 EEPROM, because they have the same page and word
size. Many EEPROMs have the same or a very similar interface and they differ
only in address and page size. Adding other chips should be easy. I'll do some
refactoring to make this straightforward and add some of the AT24CXXX chips
myself. Pull requests are always welcome.

The current [[https://github.com/wose/at24cx][WIP driver is on github]]. And will be released to [[https://crates.io][crates.io]] after the
ACK polling has been added. The [[https://github.com/wose/at24cx/blob/master/README.md][README.md]] contains a list of implemented and
planned features. Feel free to open an issue if something is missing or could be
improved.

I'll try to cover the DS3231 RTC in a later post ([[https://github.com/wose/ds3231][WIP driver]]).
* GDB + SVD
:PROPERTIES:
:RSS_PERMALINK: gdb-svd.html
:PUBDATE:  2018-01-21
:ID:       e514509d-9e05-4ad9-afa0-3480133eda7e
:END:
#+tags: log, gdb, svd, embedded, rust
If you debug embedded inferiors with GDB you might want to check the state of
some register of some peripheral. You can do this by hand by just reading the
memory where the register is mapped. This includes consulting the data sheet to
get the address which is pretty slow if you need to do this often.

There is a GDB plugin called [[https://github.com/bnahill/PyCortexMDebug][PyCortexMDebug]], which enables you to read or write
registers, show descriptions and list peripherals of micro controllers. The
peripheral and register information are loaded from a [[http://www.keil.com/pack/doc/CMSIS/SVD/html/index.html][System View Description
file (SVD)]] You can find many svd files from different vendors in this
repository: [[https://github.com/posborne/cmsis-svd/][cmsis-svd]].

Unfortunately the plugin only worked if your inferior is written in C/C++
because the method of actually reading/writing memory uses c-style type casts.
This doesn't work if you debug a rust inferior like I did. GDBs python API
provides methods to directly [[https://sourceware.org/gdb/current/onlinedocs/gdb/Inferiors-In-Python.html#index-Inferior_002eread_005fmemory-1][read or write]] a specific address in the inferiors
memory. So let's use them: https://github.com/wose/PyCortexMDebug

A pull request will be made after I tested it a little more.

After the plugin installation you can add something like the following to your
=.gdbinit= of your project to activate the plugin and load a specific svd file.

#+begin_example
  source gdb.py
  svd_load STM32F103xx.svd
#+end_example

=gdb.py= is the one which is part of PyCortexMDebug. You'll have to specify the
path where you've put it or copy it next to your =.gdbinit=.

After connecting to your target you can use the =svd= command:

#+begin_example
  >>> svd
  Available Peripherals:
          FSMC:    Flexible static memory controller
          PWR:     Power control
          RCC:     Reset and clock control
          GPIOA:   General purpose I/O
          GPIOB:   General purpose I/O
          GPIOC:   General purpose I/O
          GPIOD:   General purpose I/O
          GPIOE:   General purpose I/O
          GPIOF:   General purpose I/O
          GPIOG:   General purpose I/O
          AFIO:    Alternate function I/O
          EXTI:    EXTI
          DMA1:    DMA controller
          DMA2:    DMA controller
          SDIO:    Secure digital input/output interface
          RTC:     Real time clock
          BKP:     Backup registers
          IWDG:    Independent watchdog
          WWDG:    Window watchdog
          TIM1:    Advanced timer
          TIM8:    Advanced timer
          TIM2:    General purpose timer
          TIM3:    General purpose timer
          TIM4:    General purpose timer
          TIM5:    General purpose timer
          TIM9:    General purpose timer
          TIM12:   General purpose timer
          TIM10:   General purpose timer
          TIM11:   General purpose timer
          TIM13:   General purpose timer
          TIM14:   General purpose timer
          TIM6:    Basic timer
          TIM7:    Basic timer
          I2C1:    Inter integrated circuit
          I2C2:    Inter integrated circuit
          SPI1:    Serial peripheral interface
          SPI2:    Serial peripheral interface
          SPI3:    Serial peripheral interface
          USART1:  Universal synchronous asynchronous receiver transmitter
          USART2:  Universal synchronous asynchronous receiver transmitter
          USART3:  Universal synchronous asynchronous receiver transmitter
          ADC1:    Analog to digital converter
          ADC2:    Analog to digital converter
          ADC3:    Analog to digital converter
          CAN:     Controller area network
          DAC:     Digital to analog converter
          DBG:     Debug support
          UART4:   Universal asynchronous receiver transmitter
          UART5:   Universal asynchronous receiver transmitter
          CRC:     CRC calculation unit
          FLASH:   FLASH
  >>> svd/x I2C1
  Registers in I2C1:
        CR1:    0x00000001  Control register 1
        CR2:    0x00000018  Control register 2
        OAR1:   0x00000000  Own address register 1
        OAR2:   0x00000000  Own address register 2
        DR:     0x000000B0  Data register
        SR1:    0x00000001  Status register 1
        SR2:    0x00000003  Status register 2
        CCR:    0x00000078  Clock control register
        TRISE:  0x00000019  TRISE register
  >>> svd I2C1 SR1
  Fields in SR1 of peripheral I2C1:
        SMBALERT:  0  SMBus alert
        TIMEOUT:   0  Timeout or Tlow error
        PECERR:    0  PEC Error in reception
        OVR:       0  Overrun/Underrun
        AF:        0  Acknowledge failure
        ARLO:      0  Arbitration lost (master mode)
        BERR:      0  Bus error
        TxE:       0  Data register empty (transmitters)
        RxNE:      0  Data register not empty (receivers)
        STOPF:     0  Stop detection (slave mode)
        ADD10:     0  10-bit header sent (Master mode)
        BTF:       0  Byte transfer finished
        ADDR:      0  Address sent (master mode)/matched (slave mode)
        SB:        1  Start bit (Master mode)
#+end_example
* PDF multi view
:PROPERTIES:
:RSS_PERMALINK: multi-view-pdf.html
:PUBDATE:  2018-01-19
:ID:       0c8a2f7a-dc0b-4e89-adfd-23ede1f95e3a
:END:
#+tags: log, pdf, emacs
While [[https://github.com/wose/ts100][playing with Rust on μCs]] I've always at least one date sheet or reference
manual open. These pdf files, especially the reference manuals, are huge (> 1k
pages) and consume a fair amount of RAM when opened in a viewer like [[https://wiki.gnome.org/Apps/Evince][evince]] or
[[https://pwmt.org/projects/zathura/][zathura]]. I found myself struggling to navigate between different parts of the
manual with a pretty high frequency. Take a look at some transfer sequence
diagram, check the description of the control register, go back to the diagram,
...

What I needed was a way to view at least two different parts of the same pdf
file at the same time. Turns out no pdf viewer known to me was able to split the
view into multiple views on the same document. Opening the file two times works,
but eats the RAM.

Someone suggested to implement it as some kind of plugin for Atom. Nahhh never,
if I had that much RAM to waste I would just open the file several times ;-)
But wait, Atom is an editor, I use an editor, I use Emacs, I bet Emacs can do
this.

And indeed Emacs would open the pdf file using [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Document-View.html][DocView]] mode and handle it like a
normal buffer, which means I can open many windows and just point them at
different parts of the buffer. Cool but not optimal since I had no way to
recolor the pdf and don't go blind reading these at night (or day, doesn't
really matter for me). There is an alternative mode to work with pdf files:
[[https://github.com/politza/pdf-tools][pdf-tools]]. And it's quite awesome. Using its midnight mode and customizing some
colors I was back to where I left zathura.

#+begin_src emacs-lisp
  (custom-set-variables
      '(pdf-view-midnight-colors (quote ("#f2be0f" . "#1a1a1a"))))
#+end_src

[[file:../images/emacs-pdf-view.png]]

There is even a spacemacs layer you can enable by adding =pdf-tools= to your
=dotspacemacs-configuration-layers=.

And there I am wondering why I left Emacs to view pdf files in the first place.
Stupid me.
* Datenspuren
:PROPERTIES:
:RSS_PERMALINK: datenspuren.html
:PUBDATE:  2017-11-03
:ID:       6bdc0883-8bb2-4787-bbc0-3cb29e0afd3b
:END:
#+tags: log, datenspuren, ccc
At last years [[https://datenspuren.de][Datenspuren]] I gave a talk about super resolution using neural
nets titled /"Do we have an image enhancer that can bit map?"/. The talk was
[[https://media.ccc.de/v/DS2016-7840-do_we_have_an_image_enhancer_that_can_bit_map][recorded]] and the [[https://github.com/wose/ds2016][slides and example net are on github]].

This year I decided to give a talk I wanted to give for some years now but never
really got to it. Around 2015 I learned about the ESA Copernicus Program and the
Sentinel satellites. I was surprised that the data and the tools to process it
were freely available and open source, but also realized that not many people
knew about it.

I tried to change this (a little bit) with this years talk /"Freie Daten(spuren)
aus dem All"/

*Abstract (de)*
#+begin_quote
Dieser Vortrag gibt einen kleinen Überblick über das ESA Copernicus Programm,
einem umfangreichen Erdbeobachtungsprogramm. An Beispielen werden die einzelnen
Sensoren und Instrumente der Sentinel Satelliten erklärt. Eine abschließende
Demo zeigt, wie jeder die frei zugänglichen Daten in eindrucksvolle Bilder
unseres Planeten verwandeln kann.
#+end_quote

[[https://github.com/wose/ds2017][Slides]]
[[https://media.ccc.de/v/DS2017-8680-freie_daten_spuren_aus_dem_all][Video]]
* Embedded Rust
:PROPERTIES:
:RSS_PERMALINK: embedded-rust.html
:PUBDATE:  2017-08-26
:ID:       83c42242-b911-42ea-8190-b58f357e3b49
:END:
#+tags: rust, log, cortex-m, ts100
I started to play with [[https://rust-lang.org][Rust]] about a year ago. I followed the lecture
[[https://github.com/LukasKalbertodt/programmieren-in-rust][/Programmieren in Rust/ by Lukas Kalbertodt]] which gives a very good introduction
of the language concepts. I really enjoyed the lecture and kind of relearned
programming in the process.

In other news, but around the same time, I got a cheap CTC 3D Printer and
started printing stuff. At first spare and improved parts for the CTC to make it
more usable and reduce the print failures. Setting up and tweaking the pre
process toolchain ([[http://www.openscad.org/][OpenSCAD]], [[https://www.freecadweb.org/][FreeCAD]], [[http://slic3r.org/][Slic3r]], ...) to prepare the CAD files was
part of it. I realized that owning a cheap 3D Printer enables you to build a
better one. There are plenty of projects and parts on sites like [[https://www.thingiverse.com/][Thingiverse]]
that you can choose from. So I started to build one.

[[file:../images/dragonfly.png]]

Most custom build 3D Printers use an Arduino based controller. The firmware
interprets G-Code from a serial connection or a file on the SD card. Extension
boards like [[http://reprap.org/wiki/RAMPS_1.4][RAMPS]] come with everything you need to control a hand full of
stepper motors, a hot end, heat bed, SD card and so on. But just using these
plug'n'play components would be boring and too easy, right?

So why not combine the Rust learning and 3D printer project? Thanks to [[https://github.com/japaric][Jorge
Aparicio]] and his awesome work and [[http://blog.japaric.io/][blog series]] explaining how to get rust working
on ARM Cortex-M microcontrollers, it was quite easy to get started.

As Rust novice and knowing almost nothing about register level programming I was
already happy after I got an LED blinking on the [[http://www.st.com/en/evaluation-tools/stm32f3discovery.html][STM32F3Discovery]] and [[http://wiki.stm32duino.com/index.php?title=Blue_Pill][Blue Pill]]
board. I decided to go with the /Blue Pill/ and its STM32F103 chip for now and
started connecting all sorts of LCDs, OLEDs and stepper drivers I had laying
around. After I got comfortable with browsing the huge reference manual and
using the [[https://github.com/japaric/stm32f103xx][generated support crate]] it was time for a small world real project.

Fortunately the soldering iron (TS-100) I bought runs of an stm32f103 and is
built to be hacked. So I started building an alternative firmware in Rust:
http://github.com/wose/ts100

[[file:../images/ts100.png]]

It doesn't do anything useful yet, but I hope this will change soon as I get
more time to
* Reset
:PROPERTIES:
:RSS_PERMALINK: reset.html
:PUBDATE:  2017-08-22
:ID:       a7d39457-3a86-47df-b22f-f8135bb4e710
:END:
#+tags: log
It has been almost two years since the last blog entry and the amount of useful
information was always questionable so I ditched the whole thing and started
from scratch. I'm now using [[https://github.com/kelvinh/org-page][org-page]] which boils down to:

=M-x op/new-post=
write the post as Org file
=git commit -a -m "adds new post"=
=M-x op/do-publication=

to create and publish a new post. We'll see if these are few enough steps for
the lazy me to keep actually posting some stuff.
